import{j as e,b as c,Y as r,V as I,aG as S,a,aj as F,c as s,d as m,r as d,U as u,E as y,F as O,Z as B,aH as G,I as w,P as f,e as T,f as _,g,h as k,R as V}from"./index-3z78uuqb.js";import{F as h}from"./FormControl-4liSbOnV.js";import{C as A}from"./ReactSyntaxHighlighter-YeCXE01n.js";import"./index-b1Kgp3Ul.js";const L=()=>{const t=[{icon:"",label:"Option 1",value:1},{icon:"",label:"Option 2",value:2},{icon:"",label:"Option 3",value:3}];return e.jsx(c,{sx:{display:"flex",justifyContent:"center",width:"100%"},children:e.jsx(h,{sx:{width:300},children:e.jsx(r,{label:"Options",id:"basic-autocomplete",options:t,renderInput:o=>e.jsx(I,{...o})})})})},z=()=>{const t=[{icon:e.jsx(m.Flag,{size:24,iconStyle:"BoldDuotone"}),label:"Andorra",value:1},{icon:e.jsx(m.Flag,{size:24,iconStyle:"BoldDuotone"}),label:"United Arab Emirates",value:2},{icon:e.jsx(m.Flag,{size:24,iconStyle:"BoldDuotone"}),label:"Afghanistan",value:3}];return e.jsx(c,{sx:{display:"flex",justifyContent:"center",width:"100%"},children:e.jsx(S,{sx:{width:300},children:e.jsx(r,{label:"Country Select",options:t,renderOption:(o,l)=>e.jsxs("li",{...o,children:[l.icon&&e.jsxs(a,{direction:"row",spacing:-2,children:[e.jsx(F,{children:l.icon}),e.jsx(s,{children:l.label})]}),!l.icon&&e.jsx(s,{children:l.label})]})})})})},E=()=>{const t=[{icon:"",label:"Option 1",value:1},{icon:"",label:"Option 2",value:2},{icon:"",label:"Option 3",value:3}],[o,l]=d.useState(t[0]),[n,p]=d.useState("");return e.jsxs(u,{container:!0,spacing:2,children:[e.jsx(u,{item:!0,desktop:12,children:e.jsx(c,{sx:{display:"flex",justifyContent:"center",width:"100%"},children:e.jsx(s,{children:`inputValue: '${n}'`})})}),e.jsx(u,{item:!0,desktop:12,children:e.jsx(c,{sx:{display:"flex",justifyContent:"center",width:"100%"},children:e.jsx(S,{sx:{width:300},children:e.jsx(r,{label:"Controllable",value:o,onChange:(i,x)=>{l(x)},inputValue:n,onInputChange:(i,x)=>{p(x)},id:"controllable",options:t,renderInput:i=>e.jsx(TextField,{...i})})})})})]})},R=()=>{const t=[{icon:"",label:"Option 1",value:1},{icon:"",label:"Option 2",value:2},{icon:"",label:"Option 3",value:3}];return e.jsxs(u,{container:!0,spacing:2,children:[e.jsx(u,{item:!0,desktop:6,children:e.jsx(r,{label:"Free Solo",freeSolo:!0,id:"basic-autocomplete",options:t,sx:{width:300},renderInput:o=>e.jsx(TextField,{...o})})}),e.jsx(u,{item:!0,desktop:6,children:e.jsx(r,{label:"Search Input",freeSolo:!0,id:"basic-autocomplete",options:t,sx:{width:300},renderInput:o=>e.jsx(TextField,{...o})})})]})};var b={},M=O;Object.defineProperty(b,"__esModule",{value:!0});var v=b.default=void 0,D=M(y()),P=e;v=b.default=(0,D.default)((0,P.jsx)("path",{d:"M19 5v14H5V5zm0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2"}),"CheckBoxOutlineBlank");var j={},$=O;Object.defineProperty(j,"__esModule",{value:!0});var C=j.default=void 0,q=$(y()),H=e;C=j.default=(0,q.default)((0,H.jsx)("path",{d:"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2m-9 14-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8z"}),"CheckBox");const U=()=>{const t=[{icon:"",label:"Option 1",value:1},{icon:"",label:"Option 2",value:2},{icon:"",label:"Option 3",value:3}],o=e.jsx(v,{fontSize:"small"}),l=e.jsx(C,{fontSize:"small"});return e.jsx(d.Fragment,{children:e.jsx(c,{sx:{display:"flex",justifyContent:"center",width:"100%"},children:e.jsx(h,{sx:{width:300},children:e.jsx(r,{label:"Multiple Values",multiple:!0,id:"checkboxes-tags",options:t,disableCloseOnSelect:!0,getOptionLabel:n=>n.title,renderOption:(n,p,{selected:i})=>e.jsxs("li",{...n,sx:{display:"flex",justifyContent:"space-between",alignItems:"center"},children:[e.jsx(B,{icon:o,checkedIcon:l,checked:i}),p.label]}),renderInput:n=>e.jsx(TextField,{label:"Checkboxes",placeholder:"hehe"})})})})})},N=()=>{const t=[{icon:"",label:"Option 1",value:1},{icon:"",label:"Option 2",value:2},{icon:"",label:"Option 3",value:3}],o=e.jsx(v,{fontSize:"small"}),l=e.jsx(C,{fontSize:"small"});return e.jsx(c,{sx:{display:"flex",justifyContent:"center",width:"100%"},children:e.jsx(h,{sx:{width:300},children:e.jsx(r,{label:"Checkbox",multiple:!0,id:"checkboxes-tags",options:t,disableCloseOnSelect:!0,getOptionLabel:n=>n.title,renderOption:(n,p,{selected:i})=>e.jsxs("li",{...n,sx:{display:"flex",justifyContent:"space-between",alignItems:"center"},children:[e.jsx(G,{icon:o,checkedIcon:l,checked:i}),p.label]}),renderInput:n=>e.jsx(TextField,{label:"Checkboxes",placeholder:"hehe"})})})})},J=`import React, { Fragment, useState } from "react";
import { Autocomplete, Grid } from "nms-creative-ui";

const Basic = () => {
  const [selectedOption, setSelectedOption] = useState(null);

  const handleChange = (event, value) => {
    setSelectedOption(value);
  };

  const getOptionLabel = (option) => (option && option.label) || "";

  const options = [
    {
      icon: "",
      label: "Option 1",
      value: 1,
    },
    {
      icon: "",
      label: "Option 2",
      value: 2,
    },
    {
      icon: "",
      label: "Option 3",
      value: 3,
    },
  ];
  return (
    <Fragment>
      <Grid container spacing={2}>
        <Grid item desktop={6}>
          <Autocomplete
            options={options}
            value={selectedOption}
            onChange={handleChange}
            label="Options"
            fullWidth
            getOptionLabel={getOptionLabel}
            renderInput={() => <TextField {...params} label="Choose a name" />}
          />
        </Grid>
        <Grid item desktop={6}>
          <Autocomplete
            label="Options"
            options={options}
            getOptionLabel={(option) => option.label}
            onChange={(event) => setSelectedOption(event.target.value)}
            startAdornment={
              selectedOption &&
              names.find((item) => item.value === selectedOption).icon
            }
          />
        </Grid>
      </Grid>
    </Fragment>
  );
};

export default Basic;`,W=`import React, { useState } from "react";
import { Autocomplete, Box, Grid, Typography } from "../../../../../components";
import { FormControl } from "@mui/material";

const ControllableStates = () => {
  const options = [
    {
      icon: "",
      label: "Option 1",
      value: 1,
    },
    {
      icon: "",
      label: "Option 2",
      value: 2,
    },
    {
      icon: "",
      label: "Option 3",
      value: 3,
    },
  ];

  const [value, setValue] = useState(options[0]);
  const [inputValue, setInputValue] = useState("");

  return (
    <Grid container spacing={2}>
      <Grid item desktop={12}>
        <Box sx={{ display: "flex", justifyContent: "center", width: "100%" }}>
          <Typography>{\`inputValue: '\${inputValue}'\`}</Typography>
        </Box>
      </Grid>

      <Grid item desktop={12}>
        <Box sx={{ display: "flex", justifyContent: "center", width: "100%" }}>
          <FormControl sx={{ width: 300 }}>
            <Autocomplete
              label="Controllable"
              value={value}
              onChange={(event, newValue) => {
                setValue(newValue);
              }}
              inputValue={inputValue}
              onInputChange={(event, newInputValue) => {
                setInputValue(newInputValue);
              }}
              id="controllable"
              options={options}
              renderInput={(params) => <TextField {...params} />}
            />
          </FormControl>
        </Box>
      </Grid>
    </Grid>
  );
};

export default ControllableStates;
`,X=`import React, { Fragment } from "react";
import { Autocomplete, Grid } from "nms-creative-ui";

const FreeSolo = () => {
  const options = [
    {
      icon: "",
      label: "Option 1",
      value: 1,
    },
    {
      icon: "",
      label: "Option 2",
      value: 2,
    },
    {
      icon: "",
      label: "Option 3",
      value: 3,
    },
  ];
  return (
    <Fragment>
      <Grid container spacing={2}>
        <Grid item desktop={6}>
          <Autocomplete
            id="free-solo"
            freeSolo
            options={options}
            label="Free Solo"
            renderInput={(params) => <TextField {...params} />}
          />
        </Grid>
        <Grid item desktop={6}>
          <Autocomplete
            id="free-solo"
            freeSolo
            disableClearable
            label="Search Input"
            options={options}
            renderInput={(params) => <TextField {...params} />}
          />
        </Grid>
      </Grid>
    </Fragment>
  );
};

export default FreeSolo;`,Y=`import React, { Fragment } from "react";
import { Autocomplete, Checkbox, Grid } from "nms-creative-ui";
import CheckBoxOutlineBlankIcon from "@mui/icons-material/CheckBoxOutlineBlank";
import CheckBoxIcon from "@mui/icons-material/CheckBox";

const MultipleValue = () => {
  const options = [
    {
      icon: "",
      label: "Option 1",
      value: 1,
    },
    {
      icon: "",
      label: "Option 2",
      value: 2,
    },
    {
      icon: "",
      label: "Option 3",
      value: 3,
    },
  ];

  const icon = <CheckBoxOutlineBlankIcon fontSize="small" />;
  const checkedIcon = <CheckBoxIcon fontSize="small" />;

  return (
    <Fragment>
      <Grid container spacing={2}>
        <Grid item desktop={12}>
          <Autocomplete
            label="Multiple Values"
            multiple
            id="checkboxes-tags"
            options={options}
            disableCloseOnSelect
            getOptionLabel={(option) => option.title}
            renderOption={(props, option, { selected }) => (
              <li
                {...props}
                sx={{
                  display: "flex",
                  justifyContent: "space-between",
                  alignItems: "center",
                }}
              >
                <Checkbox
                  icon={icon}
                  checkedIcon={checkedIcon}
                  checked={selected}
                />
                {option.label}
              </li>
            )}
            renderInput={(params) => (
              <TextField label="Checkboxes" placeholder="hehe" />
            )}
          />
        </Grid>
      </Grid>
    </Fragment>
  );
};

export default MultipleValue;`,Z=`import React, { Fragment } from "react";
import {
  Autocomplete,
  Checkbox,
  Grid,
  TextField,
} from "nms-creative-ui";
import CheckBoxOutlineBlankIcon from "@mui/icons-material/CheckBoxOutlineBlank";
import CheckBoxIcon from "@mui/icons-material/CheckBox";

const Checkboxes = () => {
  const options = [
    {
      icon: "",
      label: "Option 1",
      value: 1,
    },
    {
      icon: "",
      label: "Option 2",
      value: 2,
    },
    {
      icon: "",
      label: "Option 3",
      value: 3,
    },
  ];

  const icon = <CheckBoxOutlineBlankIcon fontSize="small" />;
  const checkedIcon = <CheckBoxIcon fontSize="small" />;
  return (
    <Fragment>
      <Grid container spacing={2}>
        <Grid item desktop={12}>
          <Autocomplete
            label="Checkbox"
            multiple
            id="checkboxes-tags"
            options={options}
            disableCloseOnSelect
            getOptionLabel={(option) => option.title}
            renderOption={(props, option, { selected }) => (
              <li
                {...props}
                sx={{
                  display: "flex",
                  justifyContent: "space-between",
                  alignItems: "center",
                }}
              >
                <Checkbox
                  icon={icon}
                  checkedIcon={checkedIcon}
                  checked={selected}
                />
                {option.label}
              </li>
            )}
            renderInput={(params) => (
              <TextField label="Checkboxes" placeholder="hehe" />
            )}
          />
        </Grid>
      </Grid>
    </Fragment>
  );
};

export default Checkboxes;`,K=`import React, { Fragment } from "react";
import {
  Autocomplete,
  Grid,
  ListItemIcon,
  Stack,
  Typography,
} from "nms-creative-ui";
import * as SolarIconSet from "solar-icon-set";

const CountrySelect = () => {
  const countries = [
    {
      icon: <SolarIconSet.Flag size={24} iconStyle="BoldDuotone" />,
      label: "Andorra",
      value: 1,
    },
    {
      icon: <SolarIconSet.Flag size={24} iconStyle="BoldDuotone" />,
      label: "United Arab Emirates",
      value: 2,
    },
    {
      icon: <SolarIconSet.Flag size={24} iconStyle="BoldDuotone" />,
      label: "Afghanistan",
      value: 3,
    },
  ];

  return (
    <Fragment>
      <Grid container spacing={2}>
        <Grid item desktop={6}>
          <Autocomplete
            label="Country Select"
            options={countries}
            renderOption={(props, option) => (
              <li {...props}>
                {option.icon && (
                  <Stack direction="row" spacing={-2}>
                    <ListItemIcon>{option.icon}</ListItemIcon>
                    <Typography>{option.label}</Typography>
                  </Stack>
                )}
                {!option.icon && <Typography>{option.label}</Typography>}
              </li>
            )}
          />
        </Grid>
        <Grid item desktop={6}>
          <Autocomplete
            label="Country Select"
            options={countries}
            renderOption={(props, option) => (
              <li {...props}>
                {option.icon && (
                  <Stack direction="row" spacing={-2}>
                    <ListItemIcon>{option.icon}</ListItemIcon>
                    <Typography>{option.label}</Typography>
                  </Stack>
                )}
                {!option.icon && <Typography>{option.label}</Typography>}
              </li>
            )}
          />
        </Grid>
      </Grid>
    </Fragment>
  );
};

export default CountrySelect;`,Q=[{id:1,name:"Basic",first_value:"1",second_value:"2",component:L,exampleComponent:J},{id:2,name:"Country Select",first_value:"1",second_value:"2",component:z,exampleComponent:K},{id:3,name:"Controllable States",first_value:"1",second_value:"2",component:E,exampleComponent:W},{id:4,name:"Free Solo",first_value:"1",second_value:"2",component:R,exampleComponent:X},{id:5,name:"Multiple Values",first_value:"1",second_value:"2",component:U,exampleComponent:Y},{id:6,name:"Checkboxes",first_value:"1",second_value:"2",component:N,exampleComponent:Z}],ee=({item:t})=>{const[o,l]=d.useState(t.first_value),n=(p,i)=>{l(i)};return e.jsx(d.Fragment,{children:e.jsx(f,{elevation:4,children:e.jsxs(T,{value:o,children:[e.jsx(s,{variant:"h4",sx:{marginBottom:3},children:t.name}),e.jsxs(_,{onChange:n,"aria-label":"lab API tabs example",children:[e.jsx(g,{label:"Preview",value:t.first_value}),e.jsx(g,{label:"JSX",value:t.second_value})]}),e.jsx(k,{value:t.first_value,children:e.jsx(f,{style:{justifyContent:"center",borderRadius:"20px",border:"1px dashed #919EAB40",backgroundColor:"#FBFBFC",padding:"24px",boxShadow:"none"},children:e.jsx(a,{direction:"row",spacing:4,children:V.createElement(t.component)})})}),e.jsx(k,{value:t.second_value,children:e.jsx(A,{code:t.exampleComponent,language:"jsx"})})]})})})},ie=()=>e.jsxs(a,{spacing:6,children:[e.jsx(c,{children:e.jsxs(a,{direction:"column",spacing:3,children:[e.jsxs(a,{direction:"row",spacing:1,children:[e.jsx(w,{color:"secondary",children:e.jsx(m.Download,{size:24,iconStyle:"BoldDuotone"})}),e.jsx(s,{variant:"body1",children:"Inputs"})]}),e.jsxs(a,{direction:"column",spacing:1,children:[e.jsx(s,{variant:"h2",children:"Autocomplete"}),e.jsx(s,{variant:"body1",children:"Lorem ipsum dolor sit amet consectetur. Urna dictum pulvinar a orci eu nunc diam in neque."})]}),e.jsx(a,{direction:"column",spacing:1,children:e.jsx("a",{href:"https://mui.com/components/autocomplete",target:"_blank",children:e.jsx(s,{children:"https://mui.com/components/autocomplete"})})})]})}),e.jsx(a,{direction:"column",spacing:6,children:Q.map((t,o)=>e.jsx(ee,{item:t},o))})]});export{ie as default};
