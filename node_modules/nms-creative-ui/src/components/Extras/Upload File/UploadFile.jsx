import React, { useCallback, useState } from "react";
import { useDropzone } from "react-dropzone";
import Typography from "../../Foundation/Typography";
import Stack from "../../Layout/Stack";
import Box from "../../Layout/Box";
import Grid from "../../Foundation/Grid";
import * as SolarIconSet from "solar-icon-set";

const dropzoneStyle = {
  border: "1px dashed #919EAB40",
  borderRadius: "20px",
  padding: "48px",
  textAlign: "center",
  cursor: "pointer",
  width: "100%",
};

const filePreviewStyle = {
  display: "flex",
  alignItems: "start",
  justifyContent: "center",
  flexWrap: "wrap",
  textAlign: "start",
};

const previewImageStyle = {
  maxWidth: "100px",
  maxHeight: "100px",
  margin: "8px",
  borderRadius: "4px",
};

const UploadFile = ({
  onFileUpload,
  acceptedFileTypes,
  multiple,
  fileRestriction,
  dragText,
  defaultText,
  subtitle,
  maxFilesText,
  maxFiles,
}) => {
  const [uploadedFiles, setUploadedFiles] = useState([]);
  const [errorMessage, setErrorMessage] = useState("");

  const onDrop = useCallback(
    (acceptedFiles) => {
      if (maxFiles && acceptedFiles.length > maxFiles) {
        setErrorMessage(`Maximum allowed files: ${maxFiles}`);
        return;
      }

      const newFiles = multiple
        ? [...uploadedFiles, ...acceptedFiles]
        : [acceptedFiles[0]];

      if (onFileUpload) {
        onFileUpload(newFiles);
      }
      setUploadedFiles(newFiles);
    },
    [onFileUpload, uploadedFiles, multiple, maxFiles]
  );

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: fileRestriction ? acceptedFileTypes : null,
    multiple: true,
    maxFiles: { maxFiles },
  });

  return (
    <Stack
      alignItems="center"
      spacing={6}
      {...getRootProps()}
      sx={dropzoneStyle}
    >
      <Box
        component={"img"}
        src="/illustrations/Upload 1.svg"
        sx={{ width: { mobile: "100%", laptop: 300, desktop: 300 } }}
      />

      <Box>
        <input {...getInputProps()} />
        {isDragActive ? (
          <Typography variant="subtitle3">{dragText}</Typography>
        ) : (
          <Stack spacing={4}>
            <Typography variant="h4">{defaultText}</Typography>
            <Typography variant="subtitle1">{subtitle}</Typography>
            {fileRestriction &&
              acceptedFileTypes &&
              acceptedFileTypes.length > 0 && (
                <Stack spacing={1}>
                  <Typography variant="subtitle1">
                    Allowed {acceptedFileTypes.join(", ")}
                  </Typography>
                  <Typography variant="subtitle1">{maxFilesText}</Typography>
                </Stack>
              )}
          </Stack>
        )}
      </Box>
      <Grid container>
        <Grid item desktop={6} tablet={12}>
          {errorMessage && <p>{errorMessage}</p>}
          {uploadedFiles.length > 0 && (
            <div>
              <Typography variant="h5" >
                Uploaded {multiple ? "Files" : "File"}:
              </Typography>

              {uploadedFiles.map((file, index) => (
                <Typography key={index}>{file.name}</Typography>
              ))}
            </div>
          )}
        </Grid>
        <Grid item desktop={6} tablet={12}>
          {uploadedFiles.length > 0 && (
            <div>
              <Typography variant="h5">File Previews:</Typography>
              <div style={filePreviewStyle}>
                {uploadedFiles.map((file, index) => (
                  <img
                    key={index}
                    src={URL.createObjectURL(file)}
                    alt={file.name}
                    style={previewImageStyle}
                  />
                ))}
              </div>
            </div>
          )}
        </Grid>
      </Grid>
    </Stack>
  );
};

export default UploadFile;
