import React from "react";
import { Grid as NMSGrid } from "@mui/material";
import PropTypes from "prop-types";

const Grid = ({
  children,
  columns,
  columnSpacing,
  component,
  direction,
  lg,
  md,
  rowSpacing,
  sm,
  spacing,
  sx,
  wrap,
  xl,
  xs,
  ...props
}) => {
return (
    <NMSGrid
      columns={columns}
      columnSpacing={columnSpacing}
      component={component}
      direction={direction}
      lg={lg}
      md={md}
      rowSpacing={rowSpacing}
      sm={sm}
      spacing={spacing}
      sx={sx}
      wrap={wrap}
      xl={xl}
      xs={xs}
      {...props}
    >
      {children}
    </NMSGrid>
  );
};

Grid.propTypes = {
  children: PropTypes.node,
  columns: PropTypes.oneOfType([
    PropTypes.arrayOf(PropTypes.number),
    PropTypes.number,
    PropTypes.object,
  ]),
  columnSpacing: PropTypes.oneOfType([
    PropTypes.arrayOf(PropTypes.number),
    PropTypes.number,
    PropTypes.object,
    PropTypes.string,
  ]),
  component: PropTypes.elementType,
  direction: PropTypes.oneOfType([
    PropTypes.oneOf(["column-reverse", "column", "row-reverse", "row"]),
    PropTypes.arrayOf(
      PropTypes.oneOf(["column-reverse", "column", "row-reverse", "row"])
    ),
    PropTypes.object,
  ]),
  lg: PropTypes.oneOfType([
    PropTypes.oneOf(["auto"]),
    PropTypes.number,
    PropTypes.bool,
  ]),
  md: PropTypes.oneOfType([
    PropTypes.oneOf(["auto"]),
    PropTypes.number,
    PropTypes.bool,
  ]),
  rowSpacing: PropTypes.oneOfType([
    PropTypes.arrayOf(PropTypes.number),
    PropTypes.number,
    PropTypes.object,
    PropTypes.string,
  ]),
  sm: PropTypes.oneOfType([
    PropTypes.oneOf(["auto"]),
    PropTypes.number,
    PropTypes.bool,
  ]),
  spacing: PropTypes.oneOfType([
    PropTypes.arrayOf(PropTypes.number),
    PropTypes.number,
    PropTypes.object,
    PropTypes.string,
  ]),
  sx: PropTypes.oneOfType([
    PropTypes.arrayOf(
      PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])
    ),
    PropTypes.func,
    PropTypes.object,
    PropTypes.bool,
  ]),
  wrap: PropTypes.oneOf(["nowrap", "wrap-reverse", "wrap"]),
  xl: PropTypes.oneOfType([
    PropTypes.oneOf(["auto"]),
    PropTypes.number,
    PropTypes.bool,
  ]),
  xs: PropTypes.oneOfType([
    PropTypes.oneOf(["auto"]),
    PropTypes.number,
    PropTypes.bool,
  ]),
};

export default Grid;
