import React, { Fragment } from "react";
import { CircularProgress, TextField as NMSTextField } from "@mui/material";
import PropTypes from "prop-types";
import { Autocomplete as NMSAutocomplete } from "@mui/material";

const Autocomplete = ({
  id,
  color,
  disabled,
  fullWidth,
  helperText,
  label,
  size,
  sx,
  options,
  loading,
  variant,
  disableCloseOnSelect,
  getOptionLabel,
  renderOption,
  multiple,
  freeSolo,
  renderInput,
  disableClearable,
  onInputChange,
  inputValue,
  value,
  ...props
}) => {
  return (
    <NMSAutocomplete
      options={options}
      disableCloseOnSelect={disableCloseOnSelect}
      getOptionLabel={(option) => (option && option.label) || ""}
      getOptionSelected={(option, selectedValue) =>
        option.value === selectedValue.value
      }
      renderOption={renderOption}
      multiple={multiple}
      freeSolo={freeSolo}
      disableClearable={disableClearable}
      onInputChange={onInputChange}
      inputValue={inputValue}
      value={value}
      renderInput={(params) => (
        <NMSTextField
          {...params}
          color={color}
          disabled={disabled}
          helperText={helperText}
          label={label}
          size={size}
          variant={variant}
          fullWidth={true}
          {...props}
          InputProps={{
            ...params.InputProps,
            endAdornment: (
              <Fragment>
                {loading ? (
                  <CircularProgress color="inherit" size={20} />
                ) : null}
                {params.InputProps.endAdornment}
              </Fragment>
            ),
          }}
        />
      )}
    />
  );
};

Autocomplete.propTypes = {
  id: PropTypes.string,
  color: PropTypes.string,
  disabled: PropTypes.bool,
  fullWidth: PropTypes.bool,
  helperText: PropTypes.string,
  label: PropTypes.string,
  size: PropTypes.string,
  sx: PropTypes.arrayOf(PropTypes.func),
  options: PropTypes.arrayOf(
    PropTypes.shape({
      label: PropTypes.string.isRequired,
      value: PropTypes.any.isRequired,
      icon: PropTypes.node,
    })
  ).isRequired,
  loading: PropTypes.bool,
  variant: PropTypes.string,
  disableCloseOnSelect: PropTypes.bool,
  renderOption: PropTypes.func,
  multiple: PropTypes.bool,
  freeSolo: PropTypes.bool,
  renderInput: PropTypes.func,
  disableClearable: PropTypes.bool,
  onInputChange: PropTypes.func,
  inputValue: PropTypes.string,
  value: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
};

Autocomplete.defaultProps = {
  color: "primary",
  size: "large",
  freeSolo: false,
};

export default Autocomplete;
