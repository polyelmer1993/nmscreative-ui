import React, { useState } from "react";
import {
  Box,
  Icon,
  Stack,
  Tab,
  Tabs,
  Typography,
} from "../../../../components";
import * as SolarIconSet from "solar-icon-set";
import ContainedButtons from "./ButtonTabs/ContainedButtons";
import OutlinedButtons from "./ButtonTabs/OutlinedButtons";
import CONTAINED from "./data/contained";
import OUTLINED from "./data/outlined";
import TEXT from "./data/text";
import TextButtons from "./ButtonTabs/TextButtons";
import ICON from "./data/icon";
import TOGGLE from "./data/toggle";
import { Link } from "react-router-dom";

const ButtonPage = () => {
  function a11yProps(index) {
    return {
      id: `simple-tab-${index}`,
      "aria-controls": `simple-tabpanel-${index}`,
    };
  }

  const [value, setValue] = useState(0);

  const handleChange = (event, newValue) => {
    setValue(newValue);
  };

  return (
    <Stack spacing={6}>
      <Box>
        <Stack direction={"column"} spacing={3}>
          <Stack direction={"row"} spacing={1}>
            <Icon color="secondary">
              <SolarIconSet.Download size={24} iconStyle="BoldDuotone" />
            </Icon>

            <Typography variant="body1">Inputs</Typography>
          </Stack>

          <Stack direction={"column"} spacing={1}>
            <Typography variant="h2">Button</Typography>
            <Typography variant="body1">
              Lorem ipsum dolor sit amet consectetur. Urna dictum pulvinar a
              orci eu nunc diam in neque.
            </Typography>
          </Stack>
          <Stack direction={"column"} spacing={1}>
            <Link to="https://mui.com/components/buttons" underline="none">
              <Typography >https://mui.com/components/buttons</Typography>
            </Link>
            <Link href="https://mui.com/components/toggle-button">
              <Typography>https://mui.com/components/toggle-button</Typography>
            </Link>
          </Stack>
        </Stack>
      </Box>

      <Box
        sx={{
          display: "flex",
          justifyContent: "center",
          "@media only screen and (max-width: 600px)": {
            width: 300,
          },
        }}
      >
        <Tabs value={value} onChange={handleChange} variant="scrollable" >
          <Tab  label="Contained Buttons" {...a11yProps(0)} sx={{padding: "20px"}} />
          <Tab label="Outlined Buttons" {...a11yProps(1)}  sx={{padding: "20px"}} />
          <Tab label="Text Buttons" {...a11yProps(2)}  sx={{padding: "20px"}} />
          <Tab label="Icon Buttons" {...a11yProps(3)}  sx={{padding: "20px"}} />
          <Tab label="Toggle Buttons" {...a11yProps(4)}  sx={{padding: "20px"}} />
        </Tabs>
      </Box>

      <CustomTabPanel value={value} index={0}>
        <Stack direction="column" spacing={6}>
          {CONTAINED.map((item, index) => (
            <ContainedButtons key={index} item={item} />
          ))}
        </Stack>
      </CustomTabPanel>
      <CustomTabPanel value={value} index={1}>
        <Stack direction="column" spacing={6}>
          {OUTLINED.map((item, index) => (
            <OutlinedButtons key={index} item={item} />
          ))}
        </Stack>
      </CustomTabPanel>
      <CustomTabPanel value={value} index={2}>
        <Stack direction="column" spacing={6}>
          {TEXT.map((item, index) => (
            <TextButtons key={index} item={item} />
          ))}
        </Stack>
      </CustomTabPanel>
      <CustomTabPanel value={value} index={3}>
        <Stack direction="column" spacing={6}>
          {ICON.map((item, index) => (
            <TextButtons key={index} item={item} />
          ))}
        </Stack>
      </CustomTabPanel>
      <CustomTabPanel value={value} index={4}>
        <Stack direction="column" spacing={6}>
          {TOGGLE.map((item, index) => (
            <TextButtons key={index} item={item} />
          ))}
        </Stack>
      </CustomTabPanel>
    </Stack>
  );
};

const CustomTabPanel = (props) => {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`simple-tabpanel-${index}`}
      aria-labelledby={`simple-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box>
          <Typography>{children}</Typography>
        </Box>
      )}
    </div>
  );
};

export default ButtonPage;
