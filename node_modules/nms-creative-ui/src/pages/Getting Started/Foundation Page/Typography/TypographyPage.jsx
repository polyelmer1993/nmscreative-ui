import React, { Fragment, useState } from "react";
import {
  Box,
  Grid,
  Icon,
  Paper,
  Stack,
  Tab,
  TabContext,
  TabList,
  TabPanel,
  Typography,
} from "../../../../components";
import COMPONENTS from "./data/components";
import * as SolarIconSet from "solar-icon-set";
import CodeBlock from "../../../../lib/ReactSyntaxHighlighter";
import EXTRAS from "./data/extra";
import { useMediaQuery } from "@mui/material";
import { FONT_DATA } from "./data/fontData";
import { FONT_EXTRA } from "./data/fontExtra";
import DashedPaper from "../../../../components/Generic Components/CustPaper/DashedPaper";
import CustPaper from "../../../../components/Generic Components/CustPaper/CustPaper";

const FontDataTabs = ({ item }) => {
  const [value, setValue] = useState(item.first_value);

  const handleChange = (event, newValue) => {
    setValue(newValue);
  };

  const isMobile = useMediaQuery("(max-width:700px)");

  return (
    <Fragment>
      {FONT_DATA.map((fontData) => (
        <CustPaper>
          <TabContext value={value}>
            <Typography variant="h4" sx={{ marginBottom: 3 }}>
              {fontData.headingName}
            </Typography>
            <TabList onChange={handleChange} aria-label="lab API tabs example">
              <Tab label="Preview" value={item.first_value} />
              <Tab label="JSX" value={item.second_value} />
            </TabList>

            <TabPanel value={item.first_value}>
              <DashedPaper>
                <Stack direction="column" spacing={2}>
                  <div key={fontData.id}>
                    <Typography variant={fontData.headingVariant}>
                      {fontData.headingName}
                    </Typography>
                    <Typography variant="body2">
                      {isMobile
                        ? `size: ${fontData.mobileFont.size} / l-height: ${fontData.mobileFont.lineHeight} / weight: ${fontData.mobileFont.weight} / letterSpacing: ${fontData.mobileFont.letterSpacing}`
                        : `size: ${fontData.desktopFont.size} / l-height: ${fontData.desktopFont.lineHeight} / weight: ${fontData.desktopFont.weight} / letterSpacing: ${fontData.desktopFont.letterSpacing}`}
                    </Typography>
                  </div>
                </Stack>
              </DashedPaper>
            </TabPanel>
            <TabPanel value={item.second_value}>
              <CodeBlock code={fontData.jsxExample} language={"jsx"} />
            </TabPanel>
          </TabContext>
        </CustPaper>
      ))}
    </Fragment>
  );
};

const FontExtraTabs = ({ item }) => {
  const [value, setValue] = useState(item.first_value);

  const handleChange = (event, newValue) => {
    setValue(newValue);
  };

  const isMobile = useMediaQuery("(max-width:700px)");

  return (
    <Fragment>
      {FONT_EXTRA.map((fontExtra) => (
        <CustPaper>
          <TabContext value={value}>
            <Typography variant="h4" sx={{ marginBottom: 3 }}>
              {fontExtra.headingName}
            </Typography>
            <TabList onChange={handleChange} aria-label="lab API tabs example">
              <Tab label="Preview" value={item.first_value} />
              <Tab label="JSX" value={item.second_value} />
            </TabList>

            <TabPanel value={item.first_value}>
              <DashedPaper>
                <Stack direction="column" spacing={2}>
                  <div key={fontExtra.id}>
                    <Typography variant={fontExtra.headingVariant}>
                      {fontExtra.headingName}
                    </Typography>
                    <Typography variant="body2">
                      {isMobile
                        ? `size: ${fontExtra.mobileFont.size} / l-height: ${fontExtra.mobileFont.lineHeight} / weight: ${fontExtra.mobileFont.weight} / letterSpacing: ${fontExtra.mobileFont.letterSpacing}`
                        : `size: ${fontExtra.desktopFont.size} / l-height: ${fontExtra.desktopFont.lineHeight} / weight: ${fontExtra.desktopFont.weight} / letterSpacing: ${fontExtra.desktopFont.letterSpacing}`}
                    </Typography>
                  </div>
                </Stack>
              </DashedPaper>
            </TabPanel>
            <TabPanel value={item.second_value}>
              <CodeBlock code={fontExtra.jsxExample} language={"jsx"} />
            </TabPanel>
          </TabContext>
        </CustPaper>
      ))}
    </Fragment>
  );
};

const TypographyPage = () => {
  return (
    <Stack spacing={6}>
      <Box>
        <Stack direction={"column"} spacing={3}>
          <Stack direction={"row"} spacing={1}>
            <Icon color="secondary">
              <SolarIconSet.Download size={24} iconStyle="BoldDuotone" />
            </Icon>

            <Typography variant="body1">Foundation</Typography>
          </Stack>

          <Stack direction={"column"} spacing={1}>
            <Typography variant="h2">Typography</Typography>
            <Typography variant="body1">
              Typography Made Easy: Pre-built Styles for Seamless Communication
            </Typography>
          </Stack>
          <Stack direction={"column"} spacing={1}>
            <a href="https://mui.com/components/autocomplete" target="_blank">
              <Typography>https://mui.com/components/autocomplete</Typography>
            </a>
          </Stack>
        </Stack>
      </Box>

      <Grid container spacing={4}>
        <Grid item mobile={12} desktop={6}>
          <Stack direction="column" spacing={2}>
            {COMPONENTS.map((item, index) => (
              <FontDataTabs key={index} item={item} />
            ))}
          </Stack>
        </Grid>

        <Grid item desktop={6} mobile={12}>
          <Stack direction="column" spacing={2}>
            {EXTRAS.map((item, index) => (
              <FontExtraTabs key={index} item={item} />
            ))}
          </Stack>
        </Grid>
      </Grid>
    </Stack>
  );
};

export default TypographyPage;
