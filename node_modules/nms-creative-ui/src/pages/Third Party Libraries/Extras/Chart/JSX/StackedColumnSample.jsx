export const StackedColumnSample = `import React, { useEffect, useRef } from "react";
import * as echarts from "echarts";
import { CanvasRenderer } from "echarts/renderers";

echarts.use(CanvasRenderer);

const StackedColumn = () => {
  const chartRef = useRef(null);

  useEffect(() => {
    const myChart = echarts.init(chartRef.current);
    const option = {
      color: ["#00B9ED", "#FFC87C", "#FF416C", "#9890e3"],
      title: {
        text: "Stacked Column",
      },
      tooltip: {
        trigger: "axis",
        axisPointer: {
          type: "cross",
          label: {
            backgroundColor: "#6a7985",
          },
        },
      },
      legend: {
        data: ["Test 1", "Test 2", "Test 3", "Test 4"],
        icon: "circle",
        selected: {
          "Test 1": true,
          "Test 2": true,
          "Test 3": true,
          "Test 4": true,
        },
        orient: "horizontal",
        right: 40,
      },
      grid: {
        left: "3%",
        right: "4%",
        bottom: "3%",
        containLabel: true,
      },
      xAxis: {
        type: "category",
        data: [
          "Jan",
          "Feb",
          "Mar",
          "Apr",
          "May",
          "Jun",
          "Jul",
          "Aug",
          "Sep",
          "Oct",
          "Nov",
          "Dec",
        ],
      },
      yAxis: [
        {
          type: "value",
          min: 0,
          max: 300,
          interval: 50,
          boundaryGap: false,
        },
      ],
      series: [
        {
          name: "Test 1",
          type: "line",
          smooth: true,
          symbol: "none",
          type: "bar",
          stack: "x",
          emphasis: {
            focus: "series",
          },
          itemStyle: {
            barWidth: "5%",
          },
          data: [30, 60, 30, 52, 60, 67, 60, 90, 75, 100, 80, 90],
        },
        {
          name: "Test 2",
          type: "line",
          smooth: true,
          symbol: "none",
          type: "bar",
          stack: "x",
          emphasis: {
            focus: "series",
          },
          itemStyle: {
            barWidth: "5%",
          },
          data: [20, 70, 80, 85, 83, 56, 30, 43, 70, 90, 75, 80],
        },
        {
          name: "Test 3",
          type: "line",
          smooth: true,
          symbol: "none",
          type: "bar",
          stack: "x",
          emphasis: {
            focus: "series",
          },
          itemStyle: {
            barWidth: "5%",
          },
          data: [60, 30, 60, 45, 30, 50, 20, 75, 60, 50, 40, 30],
        },
        {
          name: "Test 4",
          type: "line",
          smooth: true,
          symbol: "none",
          type: "bar",
          stack: "x",
          emphasis: {
            focus: "series",
          },
          itemStyle: {
            borderRadius: [8, 8, 0, 0],
            barWidth: "5%",
          },
          data: [50, 82, 60, 44, 30, 50, 20, 75, 60, 50, 40, 120],
        },
      ],
    };

    option && myChart.setOption(option);

    return () => {
      myChart.dispose();
    };
  }, []);

  return (
    <div
      id="main"
      style={{ width: "100%", height: "400px" }}
      ref={chartRef}
    ></div>
  );
};

export default StackedColumn;`
