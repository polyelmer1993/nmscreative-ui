import { date, mixed, object, ref, string } from "yup";
import { useFormik } from "formik";
import React, { useState } from "react";
import {
  Box,
  Button,
  DesktopDatePicker,
  Grid,
  IconButton,
  Paper,
  Stack,
  TextField,
} from "../../../../../components";
import { LocalizationProvider } from "@mui/x-date-pickers";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import { InputAdornment, useMediaQuery } from "@mui/material";
import * as SolarIconSet from "solar-icon-set";

const initialValues = {
  firstName: "",
  lastName: "",
  middleName: "",
  suffix: "",
  personalEmail: "",
  companyEmail: "",
  birthdate: null,
  age: "",
  password: "",
  confirmPassword: "",
};

const Basic = ({ user }) => {
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

  const handleTogglePasswordVisibility = () => {
    setShowPassword((prevShowPassword) => !prevShowPassword);
  };

  const handleToggleConfirmPasswordVisibility = () => {
    setShowConfirmPassword((showConfirmPassword) => !showConfirmPassword);
  };

  const isMobile = useMediaQuery("(max-width:600px)");

  const formik = useFormik({
    initialValues: user || initialValues,
    validationSchema: object({
      firstName: string().max(15).required("Required*"),
      lastName: string().max(20).required("Required*"),
      middleName: string().max(15).required("Required*"),
      suffix: string().max(4).required("Required*"),
      birthdate: date()
        .max(new Date(), "Birthdate cannot be in the future")
        .required("Required*"),
      personalEmail: string().email("Invalid email address"),
      companyEmail: string()
        .email("Invalid email address")
        .required("Required*")
        .notOneOf(
          [ref("personalEmail")],
          "Personal and company email should not be the same"
        ),
      password: string().max(15).required("Required*"),
      confirmPassword: string()
        .oneOf([ref("password")], "Passwords must match")
        .required("Required*"),
      age: string()
        .required("Required")
        .typeError("Must be a number")
        .max(3, "Are you really that old?"),
    }),
    validateOnChange: false,

    onSubmit: (values) => {
      console.log(values);
      alert(JSON.stringify(values, null, 2));
    },
  });

  const handleClearForm = () => {
    formik.resetForm();
  };

  return (
    <form onSubmit={formik.handleSubmit}>
      <Grid container spacing={4}>
        <Grid item mobile={12} desktop={6}>
          <TextField
            fullWidth
            label="First name"
            error={Boolean(formik.errors?.firstName)}
            helperText={formik.errors?.firstName}
            onChange={({ target }) =>
              formik.setFieldValue("firstName", target.value)
            }
            value={formik.values.firstName}
          />
        </Grid>

        <Grid item mobile={12} desktop={6}>
          <TextField
            id="lastName"
            type="text"
            label="Last name"
            error={Boolean(formik.errors?.lastName)}
            helperText={formik.errors?.lastName}
            onChange={({ target }) =>
              formik.setFieldValue("lastName", target.value)
            }
            value={formik.values.lastName}
          />
        </Grid>

        <Grid item mobile={12} desktop={6}>
          <TextField
            fullWidth
            id="middleName"
            type="text"
            label="Middle name"
            error={Boolean(formik.errors?.middleName)}
            helperText={formik.errors?.middleName}
            onChange={({ target }) =>
              formik.setFieldValue("middleName", target.value)
            }
            value={formik.values.middleName}
          />
        </Grid>

        <Grid item mobile={12} desktop={6}>
          <TextField
            id="suffix"
            type="text"
            label="Suffix"
            error={Boolean(formik.errors?.suffix)}
            helperText={formik.errors?.suffix}
            onChange={({ target }) =>
              formik.setFieldValue("suffix", target.value)
            }
            value={formik.values.suffix}
          />
        </Grid>

        <Grid item mobile={12} desktop={6}>
          <LocalizationProvider dateAdapter={AdapterDayjs}>
            <DesktopDatePicker
              label="Birthdate"
              value={formik.values.birthdate}
              onChange={(value) => formik.setFieldValue("birthdate", value)}
              onBlur={() => formik.setFieldTouched("birthdate", true)}
              renderInput={(params) => (
                <TextField {...params} id="birthdate" type="text" />
              )}
              slotProps={{
                textField: {
                  error:
                    formik.touched.birthdate &&
                    Boolean(formik.errors.birthdate),
                  helperText:
                    formik.touched.birthdate && formik.errors.birthdate
                      ? formik.errors.birthdate
                      : "",
                },
              }}
            />
          </LocalizationProvider>
        </Grid>

        <Grid item mobile={12} desktop={6}>
          <TextField
            id="age"
            label="Age"
            fullWidth
            variant="outlined"
            type="number"
            error={Boolean(formik.errors?.age)}
            helperText={formik.errors?.age}
            onChange={({ target }) => formik.setFieldValue("age", target.value)}
            value={formik.values.age}
          />
        </Grid>

        <Grid item mobile={12} desktop={6}>
          <TextField
            id="personalEmail"
            type="email"
            label="Personal Email"
            error={Boolean(formik.errors?.personalEmail)}
            helperText={formik.errors?.personalEmail}
            onChange={({ target }) =>
              formik.setFieldValue("personalEmail", target.value)
            }
            value={formik.values.personalEmail}
          />
        </Grid>

        <Grid item mobile={12} desktop={6}>
          <TextField
            id="company"
            type="email"
            label="Company Email"
            error={Boolean(formik.errors?.companyEmail)}
            helperText={formik.errors?.companyEmail}
            onChange={({ target }) =>
              formik.setFieldValue("companyEmail", target.value)
            }
            value={formik.values.companyEmail}
          />
        </Grid>

        <Grid item mobile={12} desktop={6}>
          <TextField
            id="password"
            type={showPassword ? "text" : "password"}
            label="Password"
            error={Boolean(formik.errors?.password)}
            helperText={formik.errors?.password}
            onChange={({ target }) =>
              formik.setFieldValue("password", target.value)
            }
            value={formik.values.password}
            endAdornment={
              <InputAdornment position="end">
                <IconButton
                  color="secondary"
                  onClick={handleTogglePasswordVisibility}
                >
                  {showPassword ? (
                    <SolarIconSet.Eye size={24} iconStyle="BoldDuotone" />
                  ) : (
                    <SolarIconSet.EyeClosed size={24} iconStyle="BoldDuotone" />
                  )}
                </IconButton>
              </InputAdornment>
            }
          />
        </Grid>

        <Grid item mobile={12} desktop={6}>
          <TextField
            id="confirmPassword"
            type={showConfirmPassword ? "text" : "password"}
            label="Confirm Password"
            error={Boolean(formik.errors?.confirmPassword)}
            helperText={formik.errors?.confirmPassword}
            onChange={({ target }) =>
              formik.setFieldValue("confirmPassword", target.value)
            }
            value={formik.values.confirmPassword}
            endAdornment={
              <InputAdornment position="end">
                <IconButton
                  color="secondary"
                  onClick={handleToggleConfirmPasswordVisibility}
                >
                  {showConfirmPassword ? (
                    <SolarIconSet.Eye size={24} iconStyle="BoldDuotone" />
                  ) : (
                    <SolarIconSet.EyeClosed size={24} iconStyle="BoldDuotone" />
                  )}
                </IconButton>
              </InputAdornment>
            }
          />
        </Grid>
      </Grid>

      <Stack
        direction={isMobile ? "column" : "row"}
        spacing={2}
        justifyContent="flex-end"
        padding="24px"
      >
        <Button variant={"text"} onClick={handleClearForm}>
          Clear
        </Button>
        <Button type="submit">Submit</Button>
      </Stack>
    </form>
  );
};

export default Basic;
